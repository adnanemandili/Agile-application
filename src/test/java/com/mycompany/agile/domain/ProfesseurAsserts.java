package com.mycompany.agile.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProfesseurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfesseurAllPropertiesEquals(Professeur expected, Professeur actual) {
        assertProfesseurAutoGeneratedPropertiesEquals(expected, actual);
        assertProfesseurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfesseurAllUpdatablePropertiesEquals(Professeur expected, Professeur actual) {
        assertProfesseurUpdatableFieldsEquals(expected, actual);
        assertProfesseurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfesseurAutoGeneratedPropertiesEquals(Professeur expected, Professeur actual) {
        assertThat(expected)
            .as("Verify Professeur auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfesseurUpdatableFieldsEquals(Professeur expected, Professeur actual) {
        assertThat(expected)
            .as("Verify Professeur relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getHireDate()).as("check hireDate").isEqualTo(actual.getHireDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfesseurUpdatableRelationshipsEquals(Professeur expected, Professeur actual) {
        assertThat(expected)
            .as("Verify Professeur relationships")
            .satisfies(e -> assertThat(e.getClasses()).as("check classes").isEqualTo(actual.getClasses()));
    }
}
